{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello!!","text":"<p>powered by"},{"location":"ansible/","title":"We are working about this","text":""},{"location":"containers/","title":"About Containers","text":"<p>Index</p> <ul> <li>Common contaiers commands</li> <li>Common images commands</li> </ul>"},{"location":"containers/#common-contaiers-commands","title":"Common contaiers commands","text":""},{"location":"containers/#run-container","title":"Run container","text":"<pre><code>docker run --help\n</code></pre> <p>Common options</p> <pre><code>-d:             # Arranca el contenedor en segundo plano.\n-p:             # Mapea un puerto del contenedor al puerto del host.\n-v:             # Mapea un volumen del host al contenedor.\n--name:         # Asigna un nombre al contenedor.\n--rm:           # Elimina el contenedor al pararlo.\n-e:             # Define una variable de entorno.\n--env-file:     # Define un archivo de variables de entorno.\n--restart:      # Define la pol\u00edtica de reinicio\n</code></pre> <p>Examples</p> <pre><code>docker run -it -d ubuntu\ndocker run -d ubuntu --name &lt;container_name&gt;\n</code></pre>"},{"location":"containers/#check-conatiners-status","title":"Check conatiners status","text":"<pre><code>docker ps --help\n</code></pre> <p>Examples</p> <pre><code>docker ps\ndocker ps -a\n</code></pre>"},{"location":"containers/#check-logs-containers","title":"Check logs containers","text":"<pre><code>docker logs --help\n</code></pre> <p>Examples</p> <pre><code>docker logs -f &lt;container_id&gt;\ndocker logs -f &lt;container_id&gt;\n</code></pre>"},{"location":"containers/#atach-to-conatiners","title":"Atach to conatiners","text":"<pre><code>docker attach --help\n</code></pre>"},{"location":"containers/#inspect-to-conatiners-show-all-container-info-in-json-format","title":"Inspect to conatiners (show all container info in json format)","text":"<pre><code>podman inspect --help\n</code></pre>"},{"location":"containers/#run-remote-commands","title":"Run remote commands","text":"<pre><code>docker exec --help\n</code></pre> <p>Examples</p> <pre><code>docker exec f5783de3f3b3 df -H\n</code></pre>"},{"location":"containers/#conectar-a-un-contenedor","title":"Conectar a un contenedor","text":"<pre><code>docker exec --help\n</code></pre> <p>Examples</p> <pre><code>docker exec -it\n</code></pre>"},{"location":"containers/#start-containers","title":"Start containers","text":"<pre><code>docker start --help\n</code></pre>"},{"location":"containers/#restart-containers","title":"Restart containers","text":"<pre><code>docker retsart --help\n</code></pre>"},{"location":"containers/#stop-containers","title":"Stop containers","text":"<pre><code>docker stop --help\n</code></pre>"},{"location":"containers/#delete-containers","title":"Delete containers","text":"<pre><code>docker rm --help\n</code></pre>"},{"location":"containers/#delete-all-stopped-containers","title":"Delete all stopped containers","text":"<pre><code>docker container prune\n</code></pre>"},{"location":"containers/#common-images-commands","title":"Common images commands","text":"<p>blablabla</p> <pre><code>docker pull  --help\n</code></pre> <p>Examples</p> <pre><code>docker pull nginx\ndocker pull alpine\n\n\n\ndocker history  --help\n</code></pre>"},{"location":"git-fast-guide/","title":"Git Fast guide","text":"<p>\u00b7\u00b7\u00b7 ~/dev/ \u251c\u2500\u2500 personal/ \u2502   \u251c\u2500\u2500 github-usuario/ \u2502   \u2502   \u251c\u2500\u2500 containers/ \u2502   \u2502   \u251c\u2500\u2500 kubernetes/ \u2502   \u2502   \u2514\u2500\u2500 python/ \u2502   \u2514\u2500\u2500 otros/ \u2502       \u2514\u2500\u2500 proyectos-experimentales/ \u251c\u2500\u2500 trabajo/ \u2502   \u251c\u2500\u2500 gitlab-empresa/ \u2502   \u2502   \u2514\u2500\u2500 devops/ \u2502   \u2502       \u251c\u2500\u2500 ci-cd/ \u2502   \u2502       \u251c\u2500\u2500 infra/ \u2502   \u2502       \u2514\u2500\u2500 monitoring/ \u2502   \u2514\u2500\u2500 clientes/ \u2502       \u2514\u2500\u2500 cliente-x/ \u2502           \u2514\u2500\u2500 proyecto-x/ \u00b7\u00b7\u00b7</p>"},{"location":"git-fast-guide/#git-config-por-cuenta","title":"Git config por cuenta","text":"<pre><code>[includeIf \"gitdir:~/dev/github/personal/\"]\n  path = ~/.gitconfig-personal\n\n[includeIf \"gitdir:~/dev/gitlab/company/\"]\n  path = ~/.gitconfig-work\n\n[user]\n  name = Tu Nombre\n  email = &lt;tunombre@gmail.com&gt;\n\n[user]\n  name = Tu Nombre Profesional\n  email = &lt;tunombre@tuempresa.com&gt;\n</code></pre>"},{"location":"git-fast-guide/#alias-rapidos-opcional","title":"Alias r\u00e1pidos (opcional)","text":"<p>Agrega estos a tu .zshrc si lo deseas:</p> <pre><code>alias cdgh=\"cd ~/dev/github/personal\"\nalias cdgl=\"cd ~/dev/gitlab/company/devops\"\n</code></pre>"},{"location":"git-fast-guide/#ubicacion-del-archivo-gitconfig","title":"Ubicaci\u00f3n del archivo .gitconfig","text":"<p>Archivo global (de usuario):</p> <p>Se encuentra en tu directorio personal:</p> <pre><code>~/.gitconfig\n</code></pre> <p>O en ruta completa:</p> <pre><code>/Users/tu-usuario/.gitconfig\n</code></pre> <p>Este archivo es el que Git usa para configuraciones de usuario, como nombre, email, alias, color del output, etc.</p> <p>Archivo local (por proyecto):</p> <p>Cada repositorio Git tambi\u00e9n puede tener su propia configuraci\u00f3n:</p> <pre><code>/path/a/tu/repositorio/.git/config\n</code></pre> <p>Este afecta solo a ese repositorio. Git aplica configuraciones en este orden de prioridad:</p> <ol> <li>Local (~/.git/config) \u2014 m\u00e1s espec\u00edfico</li> <li>Global (~/.gitconfig)</li> <li>Sistema (/etc/gitconfig)</li> </ol> <p>\u00bfC\u00f3mo saber cu\u00e1l est\u00e1s usando?</p> <p>Puedes ver tu configuraci\u00f3n actual con:</p> <pre><code>git config --list --show-origin\n</code></pre> <p>Esto te muestra todas las configuraciones activas y de qu\u00e9 archivo vienen. \ud83d\udee0\ufe0f Para editar el .gitconfig global</p> <p>nano ~/.gitconfig</p> <p>O si prefieres abrirlo con Visual Studio Code:</p> <p>code ~/.gitconfig</p> <p>\u00bfQuieres que te d\u00e9 un .gitconfig base ya listo con los includeIf para m\u00faltiples cuentas? You said: Si por favot ChatGPT said:</p> <p>Perfecto. Aqu\u00ed tienes una configuraci\u00f3n lista para copiar y pegar, que te permite tener dos perfiles de Git:</p> <pre><code>Uno personal (para proyectos en GitHub)\n\nOtro profesional (para proyectos de tu empresa en GitLab)\n</code></pre> <p>\ud83d\udcc4 1. ~/.gitconfig (archivo principal)</p> <p>[user]     name = Tu Nombre     email = tunombre@gmail.com     # Este es el perfil por defecto si Git no encuentra un match en includeIf</p> <p>[includeIf \"gitdir:~/dev/github/personal/\"]   path = ~/.gitconfig-personal</p> <p>[includeIf \"gitdir:~/dev/gitlab/company/\"]   path = ~/.gitconfig-work</p> <p>[core]   editor = nano   autocrlf = input</p> <p>[color]   ui = auto</p> <p>[alias]   st = status   co = checkout   ci = commit   br = branch   lg = log --oneline --graph --all</p> <p>~/.gitconfig-personal</p> <p>[user]   name = Tu Nombre   email = tunombre@gmail.com</p> <p>\ud83d\udcc4 3. ~/.gitconfig-work</p> <p>[user]   name = Tu Nombre Profesional   email = tunombre@tuempresa.com</p> <p>\u2705 \u00bfQu\u00e9 hace esta configuraci\u00f3n?</p> <pre><code>Cuando est\u00e9s dentro de ~/dev/github/personal/**, Git usar\u00e1 el perfil personal.\n\nCuando est\u00e9s dentro de ~/dev/gitlab/company/**, Git usar\u00e1 el perfil profesional.\n\nEn cualquier otro sitio, usar\u00e1 el perfil por defecto definido en [user] en ~/.gitconfig.\n</code></pre>"},{"location":"git-fast-guide/#crea-el-entorno-virtual-y-activa","title":"Crea el entorno virtual y activa","text":"<p>python3 -m venv venv   source venv/bin/activate</p>"},{"location":"git-fast-guide/#paso-1-instalar-gh-si-aun-no-lo-tienes","title":"Paso 1: Instalar gh (si a\u00fan no lo tienes)","text":"<p>En macOS, con Homebrew:</p> <p>brew install gh</p> <p>Luego autent\u00edcate:</p> <p>gh auth login</p>"},{"location":"git-fast-guide/#paso-2-crear-el-repo-desde-tu-proyecto-local","title":"Paso 2: Crear el repo desde tu proyecto local","text":"<p>En tu proyecto local:</p> <p>cd ~/mis-proyectos/mi-nuevo-repo   git init   git add .   git commit -m \"Primer commit\"</p> <p>Ahora crea el repositorio en GitHub con:</p> <p>gh repo create tu-usuario/mi-nuevo-repo --public --source=. --remote=origin (--push)</p> <p>O, si prefieres privado:</p> <p>gh repo create tu-usuario/mi-nuevo-repo --private --source=. --remote=origin --push</p> <p>Esto hace todo en un paso:</p> <pre><code>Crea el repo en GitHub\n\nLo enlaza como origin\n\nHace git push\n</code></pre> <p>Crear rama de Git</p> <p>git checkout -b"},{"location":"kubernetes/","title":"We are working about this","text":""},{"location":"terraform-fast-guide/","title":"We are working about this","text":""},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#_1","title":"Tools","text":""},{"location":"tools/#git","title":"Git","text":"<ul> <li>Git Fast Guide</li> </ul>"},{"location":"tools/#terraform","title":"Terraform","text":"<ul> <li>Terraform Fast Guide</li> </ul>"}]}